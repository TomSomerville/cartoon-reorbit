generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CZone {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  layoutData  Json
  background  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ctoon {
  id                String          @id @default(uuid())
  name              String
  series            String?
  type              String
  rarity            String
  assetPath         String
  releaseDate       DateTime?
  perUserLimit      Int?
  codeOnly          Boolean         @default(false)
  inCmart           Boolean         @default(false)
  price             Int             @default(0)
  initialQuantity   Int?             // NULL means unlimited
  quantity          Int?             // NULL means unlimited
  createdAt         DateTime        @default(now())
  set               String?
  characters        String[]

  owners            UserCtoon[]
  // removed old ClaimCodeReward[] relation
  rewardCtoons      RewardCtoon[]   // relation back from RewardCtoon
  packOptions       PackCtoonOption[]
}

model UserCtoon {
  id             String    @id @default(uuid())
  userId         String
  ctoonId        String
  isTradeable    Boolean   @default(true)
  inCzone        Boolean   @default(false)
  isFirstEdition Boolean   @default(false)
  mintNumber     Int?
  userPurchased  Boolean   @default(true)
  createdAt      DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
  ctoon  Ctoon  @relation(fields: [ctoonId], references: [id])

  tradeCtoons   TradeCtoon[]
}

model UserPoints {
  userId         String    @id
  points         Int       @default(0)
  lastDailyAward DateTime?
  updatedAt      DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(uuid())
  username       String?   @unique
  discordId      String    @unique
  discordTag     String?
  discordAvatar  String?
  email          String?
  avatar         String?
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  roles          String[]  @default([])
  isAdmin        Boolean   @default(false)
  inGuild        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  lastLogin      DateTime?
  discordCreatedAt DateTime?

  cZones           CZone[]
  claims           Claim[]
  visits           Visit[]
  points           UserPoints?
  ctoons           UserCtoon[]
  friends          Friend[]         @relation("UserFriends")
  friendedBy       Friend[]         @relation("UserFriendOf")
  traderARooms     TradeRoom[]      @relation("TraderA")
  traderBRooms     TradeRoom[]      @relation("TraderB")
  trades           Trade[]
  tradeSpectators  TradeSpectator[]
  ips              UserIP[]
  packs           UserPack[]
}

model UserIP {
  id     String @id @default(uuid())
  userId String
  ip     String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, ip])
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("UserFriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model ClaimCode {
  id         String             @id @default(uuid())
  code       String             @unique
  maxClaims  Int
  createdAt  DateTime           @default(now())
  expiresAt  DateTime?
  claims     Claim[]
  rewards    ClaimCodeReward[]
}

model Claim {
  id        String    @id @default(uuid())
  userId    String
  codeId    String
  claimedAt DateTime  @default(now())

  user  User      @relation(fields: [userId], references: [id])
  code  ClaimCode @relation(fields: [codeId], references: [id])

  @@unique([userId, codeId])
}

/// One “reward batch” per code; may include points and multiple cToon grants
model ClaimCodeReward {
  id       String            @id @default(uuid())
  codeId   String
  points   Int?              // optional points to award

  code     ClaimCode         @relation(fields: [codeId], references: [id])
  ctoons   RewardCtoon[]     // zero or more cToon grants
  packs    RewardPack[]
}

/// Join table so each reward can include many cToons
model RewardCtoon {
  id        String             @id @default(uuid())
  rewardId  String
  ctoonId   String
  quantity  Int                @default(1)

  reward    ClaimCodeReward    @relation(fields: [rewardId], references: [id])
  ctoon     Ctoon              @relation(fields: [ctoonId], references: [id])
}

model RewardPack {
  id        String   @id @default(uuid())
  rewardId  String
  packId    String
  quantity  Int      @default(1)

  reward    ClaimCodeReward @relation(fields: [rewardId], references: [id])
  pack      Pack            @relation(fields: [packId], references: [id])

  @@unique([rewardId, packId])
}

model Visit {
  id          String   @id @default(uuid())
  userId      String
  zoneOwnerId String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model TradeRoom {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  active      Boolean  @default(true)

  traderAId   String?
  traderBId   String?
  traderA     User?    @relation("TraderA", fields: [traderAId], references: [id])
  traderB     User?    @relation("TraderB", fields: [traderBId], references: [id])

  trades      Trade[]
  spectators  TradeSpectator[]
}

model Trade {
  id          String   @id @default(uuid())
  userId      String
  roomId      String
  confirmed   Boolean  @default(false)

  user   User      @relation(fields: [userId], references: [id])
  room   TradeRoom @relation(fields: [roomId], references: [id])
  ctoons TradeCtoon[]
}

model TradeCtoon {
  id          String   @id @default(uuid())
  tradeId     String
  userCtoonId String

  trade     Trade     @relation(fields: [tradeId], references: [id])
  userCtoon UserCtoon @relation(fields: [userCtoonId], references: [id])
}

model TradeSpectator {
  id        String   @id @default(uuid())
  roomId    String
  userId    String

  room      TradeRoom    @relation(fields: [roomId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model Pack {
  id            String   @id @default(uuid())
  name          String
  description   String?
  price         Int      @default(0)
  imagePath     String?
  inCmart       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  /* How many pulls of each rarity come in one pack */
  rarityConfigs PackRarityConfig[]
  /* All candidate cToons (with weights) that can be rolled */
  ctoonOptions  PackCtoonOption[]
  /* Instances users have purchased */
  userPacks     UserPack[]
  rewardPacks   RewardPack[]
}

model PackRarityConfig {
  id        String @id @default(uuid())
  packId    String
  rarity    String
  count     Int
  probabilityPercent Int  @default(100)

  pack      Pack   @relation(fields: [packId], references: [id])

  @@unique([packId, rarity])
}

model PackCtoonOption {
  id        String @id @default(uuid())
  packId    String
  ctoonId   String
  weight    Int    @default(1)

  pack      Pack   @relation(fields: [packId], references: [id])
  ctoon     Ctoon  @relation(fields: [ctoonId], references: [id])

  @@unique([packId, ctoonId])
}

model UserPack {
  id        String   @id @default(uuid())
  userId    String
  packId    String
  opened    Boolean  @default(false)
  openedAt  DateTime?
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
  pack      Pack @relation(fields: [packId], references: [id])
}